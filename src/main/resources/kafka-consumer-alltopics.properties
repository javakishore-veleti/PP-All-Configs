key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
bootstrap.servers=localhost:9092

# https://www.confluent.io/blog/kafka-consumer-multi-threaded-messaging/
# In reality, offsets are committed during the consumer's poll method execution, 
# and the auto.commit.interval.ms only defines the minimum delay between commits
auto.commit.interval.ms=1

enable.auto.commit=true

# Motivation for a multi-threaded consumer architecture

# The maximum delay allowed between poll method calls is defined by the max.poll.interval.ms
# which is five minutes by default
# If a consumer fails to call the poll method within that interval, it is considered dead, 
# and group rebalancing is triggered. This can happen often with the thread per consumer and 
# default configuration for use cases where each record takes a long time to be processed.
#max.poll.interval.ms=

# When using the thread per consumer model, you can deal with this problem by tuning the following config values:
#  Set max.poll.records to a smaller value
#  Set max.poll.interval.ms to a higher value
#  Perform a combination of both

